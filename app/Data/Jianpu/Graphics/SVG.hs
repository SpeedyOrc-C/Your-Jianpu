module Data.Jianpu.Graphics.SVG where

import Control.Monad.Reader
import Control.Monad.Writer
import Data.Jianpu.Graphics.Config
import Data.Jianpu.Graphics.Render
import Data.Jianpu.Types
import Data.Layout
import Data.List.NonEmpty (NonEmpty (..))

type StringWriter = Writer (Endo String) ()

puts :: String -> StringWriter
puts content = tell $ Endo (content ++)

putText :: Double -> Double -> Double -> AlignText -> String -> StringWriter
putText x y size align text = do
    puts "<text x="
    puts $ show $ show x
    puts " y="
    puts $ show $ show y
    puts " font-size="
    puts $ show $ show size
    case align of
        ATLeft -> pure ()
        ATRight -> do
            puts " text-anchor=\"end\""
        ATCentre -> do
            puts " text-anchor=\"middle\""
    puts ">"
    puts text
    puts "</text>"

putImage :: Double -> Double -> Double -> Double -> String -> StringWriter
putImage x y width height href = do
    puts "<image href="
    puts $ show href
    puts " x="
    puts $ show $ show x
    puts " y="
    puts $ show $ show y
    puts " width="
    puts $ show $ show width
    puts " height="
    puts $ show $ show height
    puts " />"

putCircle :: Double -> Double -> Double -> StringWriter
putCircle cx cy r = do
    puts "<circle cx="
    puts $ show $ show cx
    puts " cy="
    puts $ show $ show cy
    puts " r="
    puts $ show $ show r
    puts " />"

putRect :: Double -> Double -> Double -> Double -> StringWriter
putRect x y width height = do
    puts "<rect x="
    puts $ show $ show x
    puts " y="
    puts $ show $ show y
    puts " width="
    puts $ show $ show width
    puts " height="
    puts $ show $ show height
    puts " />"

putGlyph :: Double -> Double -> Double -> Double -> Glyph -> StringWriter
putGlyph x y width height g = putImage x y width height $ case g of
    G0 -> "asset/Glyph0.svg"
    G1 -> "asset/Glyph1.svg"
    G2 -> "asset/Glyph2.svg"
    G3 -> "asset/Glyph3.svg"
    G4 -> "asset/Glyph4.svg"
    G5 -> "asset/Glyph5.svg"
    G6 -> "asset/Glyph6.svg"
    G7 -> "asset/Glyph7.svg"
    GX -> "asset/GlyphX.svg"

putAccidental :: Double -> Double -> Double -> Double -> GAccidental -> StringWriter
putAccidental x y width height a = putImage x y width height $ case a of
    GSharp -> "asset/AccidentalSharp.svg"
    GFlat -> "asset/AccidentalFlat.svg"
    GNatural -> "asset/AccidentalNatural.svg"
    GDoubleSharp -> "asset/AccidentalDoubleSharp.svg"
    GDoubleFlat -> "asset/AccidentalDoubleFlat.svg"

putDrawDirective :: DrawDirective RenderObject -> Reader RenderConfig StringWriter
putDrawDirective (Transform position (scaleX, scaleY), anchorPosition, object) = do
    (sizeX, sizeY) <- getSize object

    let ((x1, y1), (x2, y2)) =
            computeBox position (sizeX * scaleX, sizeY * scaleY) anchorPosition

    let x = x1
    let y = y1
    let width = x2 - x1
    let height = y2 - y1

    pure $ do
        puts "\t"

        case object of
            Circle r -> putCircle ((x1 + x2) / 2) ((y1 + y2) / 2) r
            Rectangle width' height' -> putRect x y width' height'
            Glyph g -> putGlyph x y width height g
            GAccidental a -> putAccidental x y width height a
            InvisibleRectangle {} -> tell mempty
            Text size align text -> putText x y size align text

        puts "\n"

putSvgPrelude :: Double -> Reader RenderConfig StringWriter
putSvgPrelude height = do
    lineWidth <- asks lineWidth
    pure $ do
        puts "<!-- Generated by Your Jianpu -->\n"
        puts "<svg xmlns=\"http://www.w3.org/2000/svg\""
        puts " width="
        puts $ show $ show lineWidth
        puts " height="
        puts $ show $ show height
        puts " viewbox=\"0 0 "
        puts $ show lineWidth
        puts " "
        puts $ show height
        puts "\">\n"

putSvgEnd :: Reader RenderConfig StringWriter
putSvgEnd = pure $ puts "</svg>\n"
